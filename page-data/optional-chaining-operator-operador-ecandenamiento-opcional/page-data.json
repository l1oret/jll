{"componentChunkName":"component---src-templates-blog-post-js","path":"/optional-chaining-operator-operador-ecandenamiento-opcional/","result":{"data":{"site":{"siteMetadata":{"title":"Out of the loop"}},"markdownRemark":{"id":"9f15702c-21a3-58d8-87e9-c909b5f4de0e","excerpt":"O mas bien, el cuando decidí que era ya era hora de ponerse al día con propuestas como las del optional chaining operator. Después de haber empezado por el…","html":"<p>O mas bien, el cuando decidí que era ya era hora de ponerse al día con propuestas como las del <strong>optional chaining operator</strong>. Después de haber empezado por el <a href=\"/nullish-coalescing-operator-operador-fusion-nula\">nullish colaescing operator</a> tenía mucho sentido seguir por ese camino y continuar con el optional chaining operator ya que su uso es complementario. Continuamente se generan <a href=\"https://github.com/tc39/proposals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nuevas propuestas</a> para ser incorporadas a la especificación y yo estaba decido a estar al corriente de todas y cada una de ellas.</p>\n<h2>¿Qué es el optional chaining operator?</h2>\n<p>El optional chaining operator <code class=\"language-text\">?.</code> es un <strong>operador de ecadenamiento</strong> como <code class=\"language-text\">.</code>, pero con una importante diferencia. El operador de ecadenamiento opcional permite leer una propiedad de un objeto o de un conjunto de objetos conectados sin tener que validar expresamente si cada una de las propiedades intermedias son válidas. Lo cual no es posible con el operador de encadenamiento tradicional <code class=\"language-text\">.</code> ya que causaría un error.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  titulo<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Out of the loop</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  social<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    twitter<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">l1oret</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">.</span>redes<span class=\"token punctuation\">.</span>facebook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → Uncaught TypeError: Cannot read property 'facebook' of undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">.</span>redes<span class=\"token operator\">?.</span>facebook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">.</span>social<span class=\"token operator\">?.</span>twitter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → l1oret</span></code></pre></div>\n<p>Mediante el optional chaining operator se consigue un código más limpio y con menos posibilidad de error. Podemos usarlo de la siguientes formas.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">objeto<span class=\"token operator\">?.</span>propiedad\nobjeto<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>expresion<span class=\"token punctuation\">]</span>\narray<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>indice<span class=\"token punctuation\">]</span>\nfuncion<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>argumentos<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Casos de uso</h2>\n<p>Un caso de uso típico podría ser cuando obtenemos un campo de texto a partir de un selector y queremos acceder a una de sus propiedades.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputFechaNacimiento <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=fechaNacimiento]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fechaNacimiento <span class=\"token operator\">=</span> inputFechaNacimiento <span class=\"token operator\">?</span> inputFechaNacimiento<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Si usamos <code class=\"language-text\">?.</code> quedaría de ls siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fechaNacimiento <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=fechaNacimiento]'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>value<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como veíamos al principio del artículo otro ejemplo sería cuando queremos acceder a una propiedad de un objeto.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> edad <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>usuario <span class=\"token operator\">&amp;&amp;</span> usuario<span class=\"token punctuation\">.</span>fechaNacimiento <span class=\"token operator\">&amp;&amp;</span> usuario<span class=\"token punctuation\">.</span>fechaNacimiento<span class=\"token punctuation\">.</span>calcularEdad<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  edad <span class=\"token operator\">=</span> usuario<span class=\"token punctuation\">.</span>fechaNacimiento<span class=\"token punctuation\">.</span><span class=\"token function\">calcularEdad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Que se refactorizaría así:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> edad <span class=\"token operator\">=</span> usuario<span class=\"token operator\">?.</span>fechaNacimiento<span class=\"token operator\">?.</span>calcularEdad<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Otro ejemplo que podemos encontrar a menudo es cuando empleamos el operador condicional ternario.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> titulo <span class=\"token operator\">=</span> usuario <span class=\"token operator\">?</span> usuario<span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">:</span> <span class=\"token string\">'Nuevo registro'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El cual simplificaríamos como:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> titulo <span class=\"token operator\">=</span> usuario<span class=\"token operator\">?.</span>nombre <span class=\"token operator\">??</span> <span class=\"token string\">'Nuevo registro'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>También podemos usar el encadenamiento opcional para acceder a una posición en concreto de un array.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>usuarios<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> db<span class=\"token punctuation\">.</span>usuarios<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>usuarios<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nombreCompleto<span class=\"token punctuation\">.</span>primerApellido<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Que se convierte a:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>usuarios<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>usuarios<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nombreCompleto<span class=\"token punctuation\">.</span>primerApellido<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es conveniente utilizar únicamente <code class=\"language-text\">?.</code> cuando sea necesario. Si sabemos a ciencia cierta que siempre que exista el usuario tendrá el objeto <code class=\"language-text\">nombreCompleto</code> y la propiedad <code class=\"language-text\">primerApellido</code> esta desaconsejado utilizar el encadenamiento opcional. Sin embargo, si tenemos claro que <code class=\"language-text\">db</code> va estar siempre defenida, pero es posible que <code class=\"language-text\">usuarios</code> no y mucho menos <code class=\"language-text\">usuarios[4]</code> entonces ahí si que sería aconsejado utilizar <code class=\"language-text\">?.</code>.</p>\n<p>Por último, otro caso de uso sería:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">delete</span> db<span class=\"token operator\">?.</span>usuarios<span class=\"token punctuation\">;</span></code></pre></div>\n<p>En este caso, únicamente sería eliminado el array de usuarios si el objeto <code class=\"language-text\">db</code> existe.</p>\n<p>Como ves el uso del optional chaining operator y de su <em>bro</em> el <a href=\"/nullish-coalescing-operator-operador-fusion-nula\">nullish colaescing operator</a> es un <em>win-win</em>.</p>","frontmatter":{"title":"El del optional chaining operator o operador de encadenamiento opcional","date":"15 agosto, 2020","description":"O mas bien, el cuando decidí que era ya era hora de ponerse al día con novedades como las del optional chaining operator."}}},"pageContext":{"slug":"/optional-chaining-operator-operador-ecandenamiento-opcional/","previous":{"fields":{"slug":"/nullish-coalescing-operator-operador-fusion-nula/"},"frontmatter":{"title":"El del nullish coalescing operator o operador de fusión nula"}},"next":null}},"staticQueryHashes":["240262808","3881471398","845209666"]}