{"componentChunkName":"component---src-templates-blog-post-js","path":"/nullish-coalescing-operator-operador-fusion-nula/","result":{"data":{"site":{"siteMetadata":{"title":"Out of the loop"}},"markdownRemark":{"id":"69aa13a9-6d81-53f9-975f-6abed520b0d6","excerpt":"O mas bien, el de cuando por LinkedIn vi un post del nullish coalescing operator y pensé ¿por qué yo no tenía ni de la existencia de esto?. Después de…","html":"<p>O mas bien, el de cuando por LinkedIn vi un post del <strong>nullish coalescing operator</strong> y pensé ¿por qué yo no tenía ni de la existencia de esto?. Después de investigar un poco, puede ver que en aquel momento era solo una propuesta para entrar en la especificación y que tal vez y solo tal vez por eso motivo yo no tenia constancia de eso. Pero la verdad no era esa, el problema era que estaba completamente desconectado y por eso no me enteraba de esa novedad ni de otras novedades del lenguaje. Hoy, ya esta en la fase final, listo para ser incorporada a la especificación y <a href=\"https://caniuse.com/#search=%3F%3F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">soportado por las versiones mas recientes de los principales navegadores</a>.</p>\n<h2 id=\"¿qué-es-el-nullish-coalescing-operator\">¿Qué es el nullish coalescing operator?</h2>\n<p>El nullish coalescing operator es un operador lógico <code class=\"language-text\">??</code> que devuelve el operando derecho siempre que el operando izquierdo sea <code class=\"language-text\">null</code> o <code class=\"language-text\">undefined</code>. En caso contrario devuelve el operando izquierdo.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">??</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">??</span> <span class=\"token string\">'TC39'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → ''</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">'ECMAScript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'ECMAScript'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token string\">'ES6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'ES6'</span></code></pre></div>\n<p>Hasta la llegada a la especificación del operador <code class=\"language-text\">??</code> siempre que queríamos asociar un valor por defecto a una variable era normal utilizar el operador lógico <strong>OR</strong> <code class=\"language-text\">||</code>. Si comparamos ambos operadores vemos que hay diferencias significativas. En el operador <code class=\"language-text\">||</code> los valores del operando izquierdo son convertidos a <code class=\"language-text\">boolean</code> para ser evaluados y siempre que se reciba cualquier valor <code class=\"language-text\">falsy</code> como <code class=\"language-text\">0</code>, <code class=\"language-text\">&#39;&#39;</code>, <code class=\"language-text\">NaN</code>, <code class=\"language-text\">null</code> o <code class=\"language-text\">undefined</code> se devolverá la expresión del operando derecho.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'JavaScript'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'TC39'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'TC39'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">'ECMAScript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'ECMAScript'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token string\">'ES6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'ES6'</span></code></pre></div>\n<p>Ese comportamiento puede llevar a equívocos o resultados inesperados si consideramos como valores válidos los valores <code class=\"language-text\">falsy</code> como el <code class=\"language-text\">0</code> o la cadena vacía <code class=\"language-text\">&#39;&#39;</code>. Ya que en esos casos el operador lógico siempre devolverá la expresión derecha.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'TC39'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 'TC39'</span></code></pre></div>\n<p>El operador de fusión nula corrige ese problema ya que únicamente determina como valores <code class=\"language-text\">falsy</code> a <code class=\"language-text\">null</code> y <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">??</span> <span class=\"token string\">'TC39'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → ''</span></code></pre></div>\n<p>Hay que tener en cuenta que si se quiere <a href=\"https://v8.dev/features/nullish-coalescing#mixing-and-matching-operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">utilizar <code class=\"language-text\">??</code> junto a los operadores lógicos</a> <strong>AND</strong> <code class=\"language-text\">&amp;&amp;</code> o <strong>OR</strong> <code class=\"language-text\">||</code> es necesario añadir paréntesis para evitar errores.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">expresion <span class=\"token operator\">&amp;&amp;</span> expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">??</span> expresion <span class=\"token operator\">&amp;&amp;</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">||</span> expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">??</span> expresion <span class=\"token operator\">||</span> expresion<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Las expresiones anteriores generarían un error <code class=\"language-text\">Uncaught SyntaxError: missing ) after argument list</code>. Lo correcto sería lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">&amp;&amp;</span> expresion<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">&amp;&amp;</span> expresion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">||</span> expresion<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">??</span> expresion<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> expresion<span class=\"token punctuation\">;</span>\nexpresion <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>expresion <span class=\"token operator\">||</span> expresion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>También interesante es su uso en combinación con su <em>colega</em> el <a href=\"/optional-chaining-operator-operador-ecandenamiento-opcional\">optional chaining operator</a> <code class=\"language-text\">?.</code> que veremos próximamente.</p>","frontmatter":{"title":"El del nullish coalescing operator o operador de fusión nula","date":"06 agosto, 2020","description":"O mas bien, el de cuando por LinkedIn vi un post del nullish coalescing operator y pensé ¿por qué yo no tenía ni de la existencia de esto?."}}},"pageContext":{"slug":"/nullish-coalescing-operator-operador-fusion-nula/","previous":{"fields":{"slug":"/execution-context-contexto-ejecucion/"},"frontmatter":{"title":"El del execution context o contexto de ejecución"}},"next":{"fields":{"slug":"/optional-chaining-operator-operador-ecandenamiento-opcional/"},"frontmatter":{"title":"El del optional chaining operator o operador de encadenamiento opcional"}}}},"staticQueryHashes":["240262808","3881471398","845209666"]}