{"componentChunkName":"component---src-templates-blog-post-js","path":"/context-execution-contexto-ejecucion/","result":{"data":{"site":{"siteMetadata":{"title":"Out of the loop"}},"markdownRemark":{"id":"e4d3d984-ae91-534d-8628-260d4f247a8d","excerpt":"O mas bien, el de cuando empecé a leer la especificación ECMAScript por el capítulo del execution context. No fue mi mejor idea, la especificación es dura de…","html":"<p>O mas bien, el de cuando empecé a leer la especificación ECMAScript por el capítulo del execution context. No fue mi mejor idea, la especificación es dura de leer, hace falta motivación, en alquel momento me conformé con acabar ese capítulo. Entenderlo ya fue otra cosa, una lectura no fue ni mucho menos suficiente, para llegar a comprender al menos algo del documento. Pero bueno un comienzo es un comienzo.</p>\n<h2>¿Qué es el context execution?</h2>\n<p>El contexto de ejecución de una implementación de la especificación <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript</a>, como por ejemplo el <a href=\"https://v8.dev\">motor V8 de JavaScript</a> utilizado por Google Chrome o Node.js, se utiliza para realizar el seguimiento y evaluación del código en tiempo de ejecución. Para ser mas exactos, según el punto <a href=\"https://tc39.es/ecma262/#sec-execution-contexts\">8.3 Execution Context</a> del documento de la <a href=\"https://tc39.es/ecma262/\">especificación</a>, un contexto de ejecución es:</p>\n<blockquote>\n<p>An execution context is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. </p>\n</blockquote>\n<p>Partiendo de esa definición, podemos hacernos solo una ligera idea de lo que es en realidad es el contexto de ejecución y todo lo que implica. Sin embargo, si que hay algo que podemos extraer claramente y es que el contexto de ejecución esta directamente relacionado con el código que se esta ejecutando.</p>\n<h2>Execution context stack y running execution context</h2>\n<p>Por lo tanto, siempre que se ejecute código JavaScript, se crearán desde uno a infinitos contextos de ejecución. Todos esos contextos que se creen se irán apilando dentro del <a href=\"https://tc39.es/ecma262/#execution-context-stack\">execution context stack</a>. El funcionamiento de dicha pila se basa en una cola <a href=\"https://es.wikipedia.org/wiki/Last_in,_first_out\">LIFO</a>, en la cuál el último contexto de ejecución en entrar es el primero en salir. Ese último contexto que entre a la pila, es decir, el que este mas arriba en la cola será siempre el <a href=\"https://tc39.es/ecma262/#running-execution-context\">running execution context</a>. En caso de exisitir únicamente un contexto de ejecución en la pila, entonces ese sera el running execution context, ya que aunque sea el único de la pila seguirá estando el más alto en la cola.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">acumulador</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token function\">acumulador</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> acumulado <span class=\"token operator\">=</span> <span class=\"token function\">acumulador</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>acumulado<span class=\"token punctuation\">)</span></code></pre></div>\n<p>A partir del ejemplo anterior vamos a ver como se va llenando la pila del contexto de ejecución y como va cambiando el running execution context. Hay que tener en cuenta que no importa que sea una función recursiva, por cada llamada a la función <code class=\"language-text\">acumulador</code> se creará un nuevo contexto de ejecución.</p>\n<p>Es interesante recalcar los siguientes puntos acerca del execution context stack:</p>\n<ul>\n<li>Es single threaded.</li>\n<li>Es síncrona.</li>\n<li>Contendra únicamente un global exectuion context.</li>\n<li>Puodrá contener hasta infinitos function execution context.</li>\n<li>Cada llamada a una función creara un nuevo contexto de ejecución, sin importar, tal y como mencionaba antes, si la llamada es asi misma o no.</li>\n</ul>\n<h2>Execution context en detalle</h2>\n<p>El execution context, contiene los siguientes state components:</p>\n<ul>\n<li>Code evaluation state </li>\n<li>Function</li>\n<li>Realm</li>\n<li>ScriptOrModule</li>\n<li><a href=\"https://tc39.es/ecma262/#table-23\">VariableEnvironment</a></li>\n<li><a href=\"https://tc39.es/ecma262/#table-23\">LexicalEnvironment</a></li>\n</ul>\n<p>Los dos que más nos interesan y de los cualos vamos a hablar son el <strong>LexicalEnvironment</strong> y el <strong>VariableEnvironment</strong>, ambos componentes son <a href=\"https://tc39.es/ecma262/#sec-environment-records\">Environments Recors</a> del execution context. Pero antes de centranos en ellos, hay que tener en cuenta que ambos componentes estan directamente relacionados con las fases de creación del execution context. Cada vez que se crea un execution context se hace en dos fases:</p>\n<ol>\n<li>Creation stage</li>\n<li>Execution stage</li>\n</ol>\n<p>La creation stage o fase de creación es cuando el context execution es creado pero aún no ha sido invocado. En ese momento en el VariableEnvironment se almacenan las variables y declaraciones de funciones. Todas las variables declaradas se inicializan con el valor <code class=\"language-text\">undefined</code>. Además, en esta fase se determina el valor de <code class=\"language-text\">this</code>. En este momento el LexicalEnvironment no es mas que una copia del VariableEnvironment.</p>\n<p>Una vez se alcanza la execution stage o fase de ejecución, son asignados los valores a las variables y el LexicalEnvironment se utiliza para resolver los enlaces de las variables. El LexicalEnvironment contendrá un environment record y una referencia al outer lexical environment. A partir del siguiente código:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nombre <span class=\"token operator\">=</span> <span class=\"token string\">'Jose'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">saludar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> saludo <span class=\"token operator\">=</span> <span class=\"token string\">'Hola'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>saludo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nombre<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hola Jose!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El LexicalEnvironment del global execution context se asemejaría a lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Global execution context</span>\nglobalEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y el del function execution context de la función <code class=\"language-text\">saludar</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Function execution context</span>\nsaludarEnvironment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  environmentRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    y<span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  outer<span class=\"token operator\">:</span> globalEnvironment\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Seguir leyendo:</em></p>\n<ul>\n<li><a href=\"https://medium.com/@g.smellyshovel/the-ecmascript-executable-code-and-execution-contexts-chapter-explained-fa6e098e230f#27f0\">The ECMAScript “Executable Code and Execution Contexts” chapter explained</a></li>\n<li><a href=\"https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0\">Understanding Execution Context and Execution Stack in Javascript</a></li>\n<li><a href=\"https://medium.com/@happymishra66/execution-context-in-javascript-319dd72e8e2c#:~:text=Execution%20context%20(EC)%20is%20defined,to%20at%20a%20particular%20time.\">Execution context, Scope chain and JavaScript internals</a></li>\n<li><a href=\"https://levelup.gitconnected.com/learn-javascript-fundamentals-scope-context-execution-context-9fe8673b3164\">Understanding JavaScript Execution Context and How It Relates to Scope and the this Context</a></li>\n<li><a href=\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\">What is the Execution Context &#x26; Stack in JavaScript?</a></li>\n<li><a href=\"https://medium.com/@5066aman/lexical-environment-the-hidden-part-to-understand-closures-71d60efac0e0\">Lexical Environment — The hidden part to understand Closures</a></li>\n</ul>","frontmatter":{"title":"El del context execution o contexto de ejecución","date":"July 25, 2020","description":"O mas bien, el de cuando empecé a leer la especificación ECMAScript por el capítulo del execution context."}}},"pageContext":{"slug":"/context-execution-contexto-ejecucion/","previous":{"fields":{"slug":"/higher-order-functions-funciones-orden-superior/"},"frontmatter":{"title":"El de las higher-order functions o funciones de orden superior"}},"next":null}},"staticQueryHashes":["240262808","3881471398"]}